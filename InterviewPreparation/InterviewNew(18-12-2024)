package com.practice.level1;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;

public class Pseucode1
{
	public static void main(String[] args) 
	{
		Pseucode1 pseucode1=new Pseucode1();
		System.out.println(pseucode1.palindromeOrNot(6565)?"palindrome":"not palindrome");
		System.out.println(palissndromeForString("pakap")?"Palindrome String":"Not Palindrome String");
		System.out.println(primeNumberOrNotPrimeNumber(17)?"Prime Number":"Not Prime Number");
		System.out.println(changingTheFirstCaseOfTheString("prasanth kumar chennuri"));
		int[] arr= {1,2,3,4,5,6,7};
		int[] arr2= {1,2,3,4,5,6,7};
		System.out.println(Arrays.toString(rotateArrayRightToLeft(arr,2)));
		System.out.println(Arrays.toString(rotateArrayLeftToRight(arr2,2)));
		noOfOccurancesInTheGivenString("PrasanthKumar");
	}
	protected boolean palindromeOrNot(int num)
	{
		int temp=num;
		int remainder=0;
		int sum=0;
		while(num>0)
		{
			remainder=num%10;
			System.out.println("Remainder-"+remainder);
			sum=(sum*10)+remainder;
			System.out.println("Sum-"+sum);
			num=num/10;
			System.out.println("num-"+num);
		}
		
		return sum==temp?true:false;
	}
	public static boolean palissndromeForString(String name)
	{
		StringBuffer sb=new StringBuffer(name);
		String reverseName=sb.reverse().toString();
		return reverseName.equals(name)?true:false;
	}
	public static boolean primeNumberOrNotPrimeNumber(int number)
	{
		boolean isPrime=true;
		for(int i=2;i<number;i++)
		{
			if(number%i==0)
			{
				isPrime=false;
				System.out.println("Number before break "+i);
				break;
			}
		}
		return isPrime;
	}
	public static String changingTheFirstCaseOfTheString(String name)
	{
		String resultName=null;
		StringBuffer sb=new StringBuffer();
		
		String[] nameArray=name.split(" ");
		for(int i=0;i<nameArray.length;i++)
		{
			for(int j=0;j<nameArray[i].length();j++)
			{
				if(j==0)
				{
					sb.append(String.valueOf(nameArray[i].charAt(j)).toUpperCase()); 
				}
				else
				{
					sb.append(nameArray[i].charAt(j));
				}
				
			}
			sb.append(" ");
		}
		
		return sb.toString();
	}
	public static int[] rotateArrayRightToLeft(int[] arr,int noOfRotation)
	{
		//{1,2,3,4,5,6,7}
		//{3,4,5,6,7,1,2}
		for(int i=0;i<noOfRotation;i++)
		{
			int temp=arr[0];
			for(int j=0;j<arr.length-1;j++)
			{
				arr[j]=arr[j+1];
			}
			arr[arr.length-1]=temp;
		}
		return arr;
	}
	public static int[] rotateArrayLeftToRight(int[] arr,int noOfRotation)
	{
		//{1,2,3,4,5,6,7}
		//{7,6,1,2,3,4,5}
		for(int i=0;i<noOfRotation;i++)
		{
			int temp=arr[arr.length-1];
			for(int j=arr.length-1;j<0;j--)
			{
				arr[j]=arr[j-1];
			}
			arr[0]=temp;
		}
		return arr;
	}
	public static void noOfOccurancesInTheGivenString(String name)
	{
		Map<Character, Integer> map=new LinkedHashMap<>();
		for(char ch:name.toCharArray())
		{
			if(map.containsKey(ch))
			{
				int val=map.get(ch);
				map.put(ch, val+1);
			}
			else
			{
				map.put(ch, 1);
			}
		}
		System.out.println("NO OF OCCURANCES["+map+"]");
	}

}
